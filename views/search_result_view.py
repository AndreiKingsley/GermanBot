import discord
from discord.ui import View, Button
from typing import List, Dict

class SearchResultView(View):
    def __init__(self, ctx, results: List[Dict]):
        super().__init__(timeout=30)
        self.ctx = ctx
        self.results = results
        self.setup_buttons()

    async def button_callback(self, interaction: discord.Interaction):
        try:
            if not await self.interaction_check(interaction):
                return

            # Get the index from the button's custom_id
            index = int(interaction.data.get('custom_id', '0'))
            if 0 <= index < len(self.results):
                selected_result = self.results[index]

                # Disable all buttons
                for item in self.children:
                    item.disabled = True
                await interaction.message.edit(view=self)

                # Process the selected track
                await interaction.response.send_message(f"üéµ –î–æ–±–∞–≤–ª—è—é —Ç—Ä–µ–∫: {selected_result['title']}")
                await self.ctx.invoke(self.ctx.bot.get_command("play"), query=selected_result["url"])
            else:
                await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç—Ä–µ–∫–∞.", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç—Ä–µ–∫–∞.", ephemeral=True)

    def setup_buttons(self):
        for i, result in enumerate(self.results):
            # Create a button for each search result
            button = Button(
                style=discord.ButtonStyle.primary,
                emoji=["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£"][i],
                custom_id=str(i),
                row=0
            )
            button.callback = self.button_callback
            self.add_item(button)

    def create_embed(self) -> discord.Embed:
        try:
            embed = discord.Embed(
                title="üéµ –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
                description="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä–æ–º, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ:",
                color=discord.Color.blue()
            )

            if self.results:
                # Create a clean list of all results
                description = [embed.description, ""]  # Start with the initial description
                for i, result in enumerate(self.results):
                    title = result['title'][:70] + "..." if len(result['title']) > 70 else result['title']
                    emoji = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£"][i]
                    description.append(
                        f"{emoji} **{title}**\n"
                        f"‚îî üì∫ **{result['channel']}** „Éª ‚è±Ô∏è {result['duration']}\n"
                        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                    )

                embed.description = "\n".join(description)

            embed.set_footer(text="–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É –∏ –Ω–∞—á–Ω–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")

            return embed
        except Exception as e:
            # Fallback embed in case of errors
            embed = discord.Embed(
                title="üéµ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞",
                description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–≤—å—é. –ù–æ –≤—ã –≤—Å–µ –µ—â–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–∫ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.",
                color=discord.Color.red()
            )
            return embed

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user != self.ctx.author:
            await interaction.response.send_message("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞!", ephemeral=True)
            return False
        return True

    async def select_result(self, interaction: discord.Interaction, index: int):
        """Legacy method, now handled in button_callback"""
        pass

    async def show_search_results(self):
        embed = self.create_embed()
        return await self.ctx.send(embed=embed, view=self)
