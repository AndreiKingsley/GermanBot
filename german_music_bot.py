import discord
from discord.ext import commands
import yt_dlp
import asyncio
import os
import re
import sqlite3
from googleapiclient.discovery import build

from _token import TOKEN, YOUTUBE_API_KEY  # –•—Ä–∞–Ω–∏ API-–∫–ª—é—á –≤ _token.py

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# –û—á–µ—Ä–µ–¥—å –ø–µ—Å–µ–Ω (—Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞)
song_queue = {}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YouTube API
youtube = build("youtube", "v3", developerKey=YOUTUBE_API_KEY)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite"""
    conn = sqlite3.connect("music_bot.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS downloaded_tracks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            url TEXT UNIQUE,
            title TEXT,
            file_path TEXT
        )
    """)
    conn.commit()
    return conn

db_conn = init_db()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–º
def is_playlist(url):
    return "playlist?list=" in url or "&list=" in url

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ
async def download_audio(url, guild_id):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–µ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor = db_conn.cursor()
    cursor.execute("SELECT file_path FROM downloaded_tracks WHERE url = ?", (url,))
    result = cursor.fetchone()

    if result:
        # –ï—Å–ª–∏ —Ç—Ä–µ–∫ —É–∂–µ —Å–∫–∞—á–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = result[0]
        title = cursor.execute("SELECT title FROM downloaded_tracks WHERE url = ?", (url,)).fetchone()[0]
        return file_path, title

    # –ï—Å–ª–∏ —Ç—Ä–µ–∫ –Ω–µ —Å–∫–∞—á–∞–Ω, —Å–∫–∞—á–∏–≤–∞–µ–º –µ–≥–æ
    ydl_opts = {
        "format": "bestaudio/best",
        "postprocessors": [{"key": "FFmpegExtractAudio", "preferredcodec": "mp3", "preferredquality": "192"}],
        "outtmpl": f"downloads/{guild_id}/%(title)s.%(ext)s",
        "quiet": True,
    }

    os.makedirs(f"downloads/{guild_id}", exist_ok=True)

    loop = asyncio.get_running_loop()
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = await loop.run_in_executor(None, lambda: ydl.extract_info(url, download=True))
        filename = ydl.prepare_filename(info).replace(".webm", ".mp3").replace(".m4a", ".mp3")
        title = info["title"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO downloaded_tracks (url, title, file_path) VALUES (?, ?, ?)", (url, title, filename))
    db_conn.commit()

    return filename, title

# –§—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞
async def play_next(ctx):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫, –∑–∞–≥—Ä—É–∂–∞—è –µ–≥–æ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º"""
    guild_id = ctx.guild.id
    if guild_id in song_queue and song_queue[guild_id]:
        url, title = song_queue[guild_id].pop(0)

        await ctx.send(f"‚¨á –ó–∞–≥—Ä—É–∂–∞—é: {title}...")
        filename, _ = await download_audio(url, guild_id)

        source = discord.FFmpegPCMAudio(filename, executable="ffmpeg", options="-loglevel quiet -ar 48000")

        ctx.voice_client.play(source, after=lambda e: asyncio.run_coroutine_threadsafe(play_next(ctx), bot.loop))
        await ctx.send(f"üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: {title}")
    else:
        await ctx.send("üéµ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –æ–∂–∏–¥–∞—é –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏...")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
async def ensure_voice(ctx):
    if ctx.author.voice:
        if ctx.voice_client is None:
            await ctx.author.voice.channel.connect()
    else:
        await ctx.send("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!")
        return False
    return True

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ YouTube
def search_youtube(query):
    search_response = youtube.search().list(
        q=query,
        part="snippet",
        maxResults=5,
        type="video",
        safeSearch="none",
    ).execute()

    results = []
    for item in search_response["items"]:
        video_id = item["id"]["videoId"]
        title = item["snippet"]["title"]
        results.append((title, f"https://www.youtube.com/watch?v={video_id}"))

    return results

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
async def process_play(ctx, url):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ"""
    guild_id = ctx.guild.id
    if guild_id not in song_queue:
        song_queue[guild_id] = []

    ydl_opts = {"quiet": True, "noplaylist": True, "extract_flat": True}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)
        title = info["title"]

    song_queue[guild_id].append((url, title))
    await ctx.send(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {title}")

    if not ctx.voice_client.is_playing():
        await play_next(ctx)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞
async def process_playlist(ctx, url):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å"""
    guild_id = ctx.guild.id
    if guild_id not in song_queue:
        song_queue[guild_id] = []

    await ctx.send("üìú –ó–∞–≥—Ä—É–∂–∞—é –ø–ª–µ–π–ª–∏—Å—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    ydl_opts = {"quiet": True, "extract_flat": True, "playlistend": 20}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)

    for entry in info["entries"]:
        if "url" in entry:
            song_queue[guild_id].append((entry["url"], entry["title"]))

    await ctx.send(f"üì• –î–æ–±–∞–≤–ª–µ–Ω–æ {len(info['entries'])} —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞.")

    if not ctx.voice_client.is_playing():
        await play_next(ctx)

# –ö–æ–º–∞–Ω–¥—ã
@bot.command(name="play", aliases=["p"], help="–î–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç –≤ –æ—á–µ—Ä–µ–¥—å. –ü—Ä–∏–º–µ—Ä: !play <–∑–∞–ø—Ä–æ—Å/—Å—Å—ã–ª–∫–∞>")
async def play(ctx, *, query: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤ –æ—á–µ—Ä–µ–¥—å –≤–∏–¥–µ–æ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç"""
    if not await ensure_voice(ctx):
        return

    youtube_url_regex = re.compile(r"(https?://)?(www\.)?(youtube\.com|youtu\.be)/.+")
    if not youtube_url_regex.match(query):
        results = search_youtube(query)
        if not results:
            await ctx.send("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ YouTube.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–∞
        view = discord.ui.View(timeout=30)
        for i, (title, link) in enumerate(results):
            button = discord.ui.Button(label=f"{i+1}. {title[:40]}", style=discord.ButtonStyle.primary, custom_id=link)

            async def callback(interaction):
                await interaction.response.defer()
                await process_play(ctx, interaction.data["custom_id"])

            button.callback = callback
            view.add_item(button)

        await ctx.send("üîé –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤:", view=view)
        return

    if is_playlist(query):
        await process_playlist(ctx, query)
    else:
        await process_play(ctx, query)

@bot.command(name="skip", aliases=["s"], help="–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫.")
async def skip(ctx):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫"""
    if ctx.voice_client and ctx.voice_client.is_playing():
        ctx.voice_client.stop()
        await ctx.send("‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞—é —Ç—Ä–µ–∫...")

@bot.command(name="queue", aliases=["q"], help="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤.")
async def queue(ctx):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤"""
    guild_id = ctx.guild.id
    if guild_id in song_queue and song_queue[guild_id]:
        queue_list = "\n".join([f"{i+1}. {title}" for i, (_, title) in enumerate(song_queue[guild_id])])
        await ctx.send(f"üìú –û—á–µ—Ä–µ–¥—å:\n{queue_list}")
    else:
        await ctx.send("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!")

@bot.command(name="pause", help="–°—Ç–∞–≤–∏—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –ø–∞—É–∑—É.")
async def pause(ctx):
    """–°—Ç–∞–≤–∏—Ç —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –Ω–∞ –ø–∞—É–∑—É"""
    if ctx.voice_client and ctx.voice_client.is_playing():
        ctx.voice_client.pause()
        await ctx.send("‚è∏ –ú—É–∑—ã–∫–∞ –Ω–∞ –ø–∞—É–∑–µ!")

@bot.command(name="resume", help="–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ.")
async def resume(ctx):
    """–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
    if ctx.voice_client and ctx.voice_client.is_paused():
        ctx.voice_client.resume()
        await ctx.send("‚ñ∂ –ü—Ä–æ–¥–æ–ª–∂–∞—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ!")

@bot.command(name="stop", help="–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å.")
async def stop(ctx):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å"""
    if ctx.voice_client:
        ctx.voice_client.stop()
        song_queue[ctx.guild.id] = []
        await ctx.send("‚èπ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞!")

@bot.command(name="remove", help="–£–¥–∞–ª—è–µ—Ç —Ç—Ä–µ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É. –ü—Ä–∏–º–µ—Ä: !remove <–Ω–æ–º–µ—Ä>")
async def remove(ctx, index: int):
    """–£–¥–∞–ª—è–µ—Ç —Ç—Ä–µ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É"""
    guild_id = ctx.guild.id
    if 0 < index <= len(song_queue[guild_id]):
        removed_song = song_queue[guild_id].pop(index - 1)
        await ctx.send(f"üóë –£–¥–∞–ª–µ–Ω–æ: {removed_song[1]}")

@bot.command(name="clear", help="–û—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤.")
async def clear(ctx):
    """–û—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤"""
    guild_id = ctx.guild.id
    if guild_id in song_queue:
        song_queue[guild_id] = []
        await ctx.send("üßπ –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞!")
    else:
        await ctx.send("üì≠ –û—á–µ—Ä–µ–¥—å —É–∂–µ –ø—É—Å—Ç–∞!")

if __name__ == '__main__':
    bot.run(TOKEN)
